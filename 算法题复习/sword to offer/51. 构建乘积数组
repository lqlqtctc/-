题目描述
给定一个数组A[0,1,...,n-1],请构建一个数组B[0,1,...,n-1],其中B中的元素B[i]=A[0]*A[1]*...*A[i-1]*A[i+1]*...*A[n-1]。不能使用除法。

思路
将每个bn的乘积元素写出来，可以发现bn是两个三角。这时候只需要动态规划求两次乘积就好。
比如bi只要求0 - i-1的和 i+1 - n-1的乘积就好。

考点：
动态规划。

class Solution {
public:
    vector<int> multiply(const vector<int>& A) {
        int n = A.size();
        vector<int> B(n, 1);
        
        for(int i=1; i<n; ++i){
            B[i] = B[i-1]*A[i-1];
        }
        
        int tmp = 1;
        for(int i=n-2; i>=0; --i){
            tmp *= A[i+1];
            B[i] *= tmp;
        }
        
        return B;
    }
};
