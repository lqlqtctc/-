题目描述
一个整型数组里除了两个数字之外，其他的数字都出现了两次。请写程序找出这两个只出现一次的数字。

思路：
因为只有两个不相等的数字，则这两个数字的二进制必有一位是不相等的。
其他的数异或后为0，则所有数异或后二进制中为1的那位就是不同的两个数字的不同位。
那么所有的数字可以分为两组，一组该位为1，一组该位为0。分成两组后，两个数字分别位于两组，同时只要分别对两组进行异或，就得到了两个数。

时间：O(n)
空间：O(n)

class Solution {
public:
    void FindNumsAppearOnce(vector<int> data,int* num1,int *num2) {
        int nonsum;
        int n = data.size();
        int bit = 0;
        vector<int> group1;
        vector<int> group2;
         
        for(int i=0; i<n; ++i){
            nonsum = nonsum^data[i];
        }
        while((nonsum&1)==0){
            nonsum >>= 1;
            ++bit;
        }
         
        for(int i=0; i<n; ++i){
            if((data[i]>>bit)&1){
                group1.push_back(data[i]);
            }
            else{
                group2.push_back(data[i]);
            }
        }
         
        for(int i=0; i<group1.size(); ++i){
            *num1 ^= group1[i];
        }
        for(int i=0; i<group2.size(); ++i){
            *num2 ^= group2[i];
        }
         
    }
};


改进：
只需要在分组的时候直接分别异或，就可以省去存储环节。

时间：O(n)
空间：O(1)

class Solution {
public:
    void FindNumsAppearOnce(vector<int> data,int* num1,int *num2) {
        int nonsum;
        int n = data.size();
        int bit = 0;
         
        for(int i=0; i<n; ++i){
            nonsum = nonsum^data[i];
        }
        while((nonsum&1)==0){
            nonsum >>= 1;
            ++bit;
        }
         
        for(int i=0; i<n; ++i){
            if((data[i]>>bit)&1){
                *num1 ^= data[i];
            }
            else{
                *num2 ^= data[i];
            }
        }
         
    }
};


改进：
只需要得到只有一个不同位为1的数（比如最后一位不同，比如0001000），得到这个数可以直接和data[i]相&，得到这个数的方法是((x-1)^x)+1)>>1。

时间：O(n)
空间：O(1)

class Solution {
public:
    void FindNumsAppearOnce(vector<int> data,int* num1,int *num2) {
        int nonsum;
        int n = data.size();
        int bit = 0;
         
        for(int i=0; i<n; ++i){
            nonsum = nonsum^data[i];
        }
        nonsum = (((nonsum-1)^nonsum)+1)>>1;
         
        for(int i=0; i<n; ++i){
            if(data[i]&nonsum){
                *num1 ^= data[i];
            }
            else{
                *num2 ^= data[i];
            }
        }
         
    }
};
