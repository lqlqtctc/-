题目描述
输入两棵二叉树A，B，判断B是不是A的子结构。（ps：我们约定空树不是任意一个树的子结构）

思路：
首先，A，B如果任何一个为空，则不是。
接下来对A的每个节点进行判断，B是不是这个节点的子结构。
将将A的根节点存入队列，如果存在子节点，也存入队列。然后对队列中每个元素与B进行判断。

/*
struct TreeNode {
	int val;
	struct TreeNode *left;
	struct TreeNode *right;
	TreeNode(int x) :
			val(x), left(NULL), right(NULL) {
	}
};*/
class Solution {
public:
    bool HasSubtree(TreeNode* pRoot1, TreeNode* pRoot2)
    {
        if(NULL==pRoot2 || NULL==pRoot1){
            return false;
        }
        
        queue<TreeNode*> myque;
        myque.push(pRoot1);
        
        while(!myque.empty()){
            if(myque.front()->val == pRoot2->val && isSameTree(myque.front(), pRoot2)){
                return true;
            }
            if(myque.front()->left!=nullptr){ myque.push(myque.front()->left);}
            if(myque.front()->right!=nullptr){ myque.push(myque.front()->right);}
            myque.pop();
        }
        
        return false;
        

    }
    
    bool isSameTree(TreeNode* pRoot1, TreeNode* pRoot2){
        if(pRoot2==nullptr){
            return true;
        }
        else if(pRoot1==nullptr){
            return false;
        }
        else if(pRoot1->val==pRoot2->val){
            return (isSameTree(pRoot1->left, pRoot2->left)) 
            && (isSameTree(pRoot1->right, pRoot2->right));
        }
        else{
            return false;
        }
    }
    
};

改进：
A和B的比较，完全不需要队列的参与。直接进行递归就行。

/*
struct TreeNode {
	int val;
	struct TreeNode *left;
	struct TreeNode *right;
	TreeNode(int x) :
			val(x), left(NULL), right(NULL) {
	}
};*/
class Solution {
public:
    bool HasSubtree(TreeNode* pRoot1, TreeNode* pRoot2)
    {
        if(NULL==pRoot2 || NULL==pRoot1){
            return false;
        }
        
        return isSameTree(pRoot1, pRoot2)
            || HasSubtree(pRoot1->left, pRoot2)
            || HasSubtree(pRoot1->right, pRoot2);

    }
    
    bool isSameTree(TreeNode* pRoot1, TreeNode* pRoot2){
        if(pRoot2==nullptr){
            return true;
        }
        else if(pRoot1==nullptr){
            return false;
        }
        else if(pRoot1->val==pRoot2->val){
            return (isSameTree(pRoot1->left, pRoot2->left)) 
            && (isSameTree(pRoot1->right, pRoot2->right));
        }
        else{
            return false;
        }
    }
    
};
