155. Minimum Depth of Binary Tree

Description

Given a binary tree, find its minimum depth.

The minimum depth is the number of nodes along the shortest path from the root node down to the nearest leaf node.


思路：
广度优先搜索，
设置一个level，第一层queue存入root和nullptr，以后遇上节点把子节点存入队列，遇上nullptrlevel+1，然后再存个nullptr。
然后遇上叶子节点直接返回level。

考点： 二叉树， 广度优先搜索。

/**
 * Definition of TreeNode:
 * class TreeNode {
 * public:
 *     int val;
 *     TreeNode *left, *right;
 *     TreeNode(int val) {
 *         this->val = val;
 *         this->left = this->right = NULL;
 *     }
 * }
 */

class Solution {
public:
    /**
     * @param root: The root of binary tree
     * @return: An integer
     */
    int minDepth(TreeNode * root) {
        // write your code here
        if(nullptr==root){ return 0;}
        int level = 1;
        queue<TreeNode *> myque;
        
        myque.push(root);
        myque.push(nullptr);
        
        while(myque.size()>1){
            if(nullptr==myque.front()){ 
                myque.push(nullptr);
                level++;
            }
            else{
                if(nullptr!=myque.front()->left){ 
                    myque.push(myque.front()->left);
                }
                if(nullptr!=myque.front()->right){ 
                    myque.push(myque.front()->right);
                }
                if(nullptr==myque.front()->right && nullptr==myque.front()->left){
                    return level;
                }
            }
            myque.pop();
        }
        
        return level;
        
    }
};
